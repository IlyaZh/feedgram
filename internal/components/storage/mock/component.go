// Code generated by MockGen. DO NOT EDIT.
// Source: component.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/IlyaZh/feedsgram/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetPosts mocks base method.
func (m *MockStorage) GetPosts(ctx context.Context, id *int, hasReaded *bool, limit *int) ([]entities.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx, id, hasReaded, limit)
	ret0, _ := ret[0].([]entities.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockStorageMockRecorder) GetPosts(ctx, id, hasReaded, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockStorage)(nil).GetPosts), ctx, id, hasReaded, limit)
}

// GetSource mocks base method.
func (m *MockStorage) GetSource(ctx context.Context, id *int, isActive *bool, limit *int) ([]entities.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSource", ctx, id, isActive, limit)
	ret0, _ := ret[0].([]entities.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSource indicates an expected call of GetSource.
func (mr *MockStorageMockRecorder) GetSource(ctx, id, isActive, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSource", reflect.TypeOf((*MockStorage)(nil).GetSource), ctx, id, isActive, limit)
}

// UpsertPost mocks base method.
func (m *MockStorage) UpsertPost(ctx context.Context, post entities.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPost", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPost indicates an expected call of UpsertPost.
func (mr *MockStorageMockRecorder) UpsertPost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPost", reflect.TypeOf((*MockStorage)(nil).UpsertPost), ctx, post)
}

// UpsertSource mocks base method.
func (m *MockStorage) UpsertSource(ctx context.Context, source entities.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSource", ctx, source)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSource indicates an expected call of UpsertSource.
func (mr *MockStorageMockRecorder) UpsertSource(ctx, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSource", reflect.TypeOf((*MockStorage)(nil).UpsertSource), ctx, source)
}
